r"""
Laplace equation using the short syntax of keywords.

See :ref:`diffusion-poisson` for the long syntax version.

Find :math:`t` such that:

.. math::
    \int_{\Omega} c \nabla s \cdot \nabla t
    = 0
    \;, \quad \forall s \;.
"""
from __future__ import absolute_import
import os
import numpy as np


from sfepy import data_dir

# Options.
diffusivity = 1.0e-5
ic_max = 2.0

filename_mesh = data_dir + '/meshes/3d/cylinder.mesh'

materials = {
    'm' : ({'c' : diffusivity},),
}

regions = {
    'Omega' : 'all', 
    'Gamma_Left' : ('vertices in (x < 0.00001)', 'facet'),
    'Gamma_Right' : ('vertices in (x > 0.099999)', 'facet'),
}

fields = {
    'temperature' : ('real', 1, 'Omega', 1),
}

variables = {
    'u' : ('unknown field', 'temperature', 0, 1),
    'v' : ('test field',    'temperature', 'u'),
}

ebcs = {
    'u1' : ('Gamma_Left', {'u.0' : 2.0}),
    'u2' : ('Gamma_Right', {'u.0' : -2.0}),
}

def get_ic(coors, ic):
    x, y, z = coors.T
    return 2 - 40.0 * x + ic_max * np.sin(4 * np.pi * x / 0.1)

functions = {
    'get_ic' : (get_ic,),
}

ics = {
    'ic' : ('Omega', {'u.0' : 'get_ic'}),
}

integrals = {
    'i' : 2,
}

equations = {
    'Temperature' : """dw_volume_dot.i.Omega(v, du/dt)
                     + dw_laplace.i.Omega(m.c, v, u) = 0"""
}

options = {
    'ls' : 'direct',
    'nls' : 'newton',
    'ts' : 'tss',
}

solvers = {
    'direct' : ('ls.scipy_direct', {}),
    'newton' : ('nls.newton', {
            'is_linear' : True,
    }),
    'tss' : ('ts.simple', {
        't0' : 0.0,
        't1' : 100.0,
        'n_step' : 11,
        'verbose' : 1,
    }),
}
